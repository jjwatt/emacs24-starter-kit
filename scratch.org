Emux setup.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/subs/emux"))
(require 'emux)
(setq emux-completing-read-command (quote ido-completing-read))
(setq multi-term-program "/bin/zsh")
#+END_SRC

** This is all from the emux README

#+BEGIN_SRC emacs-lisp
;; Tell term which keys you do not want to send to the underlying terminal:

;; '(term-unbind-key-list (quote ("C-z" "C-x" "C-c" "C-h" "C-l" "<ESC>")))

;; Setup pretty terminal colors:

  ;; '(ansi-term-color-vector [unspecified "white" "red" "green" "yellow"
  ;; "royal blue" "magenta" "cyan" "white"] t)

;; Set multi-term scolling behaviour:

;; '(multi-term-scroll-show-maximum-output t)

;; Set maximum buffer size (scrollback):

;; '(term-buffer-maximum-size 16384)

;; Set term default background and foreground:

;; '(term-default-bg-color "#000000")
;; '(term-default-fg-color "#AAAAAA")


;; for some reason you need to have a fringe, or multi-term doesn't seem
;; to scroll output correctly

;; '(fringe-mode (quote (1 . 1)) nil (fringe))

;; Bind some keys (below is what I use):

(global-set-key (kbd "C-x c") '
                emux-term-create)
(global-set-key (kbd "C-x P") 'emux-session-load-template)

(setq
 term-bind-key-alist
 '(("C-x c" . emux-term-create)
   ("C-x r" . emux-term-rename)
   ("C-x K" . emux-term-destroy)
   ("C-x C" . emux-screen-create)
   ("C-x R" . emux-screen-rename)
   ("C-x s" . emux-screen-switch)
   ("C-x M-s" . emux-jump-to-screen)
   ("C-x S" . emux-session-switch)
   ("C-x P" . emux-session-load-template)
   ("C-x C-S-k" . emux-session-destroy)
   ("C-x B" . emux-jump-to-buffer)
   ("C-S-y" . emux-term-yank)
   ("C-x -" . emux-term-vsplit)
   ("C-x |" . emux-term-hsplit)
   ("C-c C-c" . term-interrupt-subjob)
   ("C-S-c" . term-interrupt-subjob)
   ("C-S-p" . previous-line)
   ("C-S-s" . isearch-forward)
   ("C-S-r" . isearch-backward)
   ("C-m" . term-send-raw)
   ("M-f" . term-send-forward-word)
   ("M-b" . term-send-backward-word)
   ("M-o" . term-send-backspace)
   ("M-d" . term-send-forward-kill-word)
   ("M-DEL" . term-send-backward-kill-word)
   ("M-," . term-send-input)
   ("M-." . comint-dynamic-complete)))

(define-key term-mode-map (kbd "C-S-l") 'emux-term-clear-screen)

;; I like to make a new frame for emux, and switch between my normal
;; Emacs stuff and my emux frame, it makes the context switching a little
;; more apparent.  You can make a frame like this:

;; (modify-frame-parameters (make-frame) (list (cons 'name "emux")))

;; and then you can switch to it with:

;; (select-frame-by-name "emux")
#+END_SRC

